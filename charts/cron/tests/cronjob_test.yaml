suite: Cronjob configuration
templates:
      - cronjob.yaml
tests:
  - it: should create default cronjob
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: metadata.name
          value: RELEASE-NAME
      - equal:
          path: spec.schedule
          value: "* * * * *"
      - equal:
          path: spec.timeZone
          value: "Europe/London"
      - equal:
          path: spec.concurrencyPolicy
          value: Allow
      - equal:
          path: spec.jobTemplate.spec.parallelism
          value: 1
      - equal:
          path: spec.jobTemplate.spec.backoffLimit
          value: 0
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].name
          value: RELEASE-NAME
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].image
          value: "public.ecr.aws/nginx/nginx:alpine"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].securityContext
          value:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
                drop:
                    - ALL
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          value:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: IMAGE_TAG
              value: alpine
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].volumeMounts
          value:
           - mountPath: /tmp
             name: tmp-volume
  - it: should add volume secrets
    set:
      secretVolume:
        file-name.txt: aGVsbG8K
    asserts:
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].volumeMounts[1]
          value:
            mountPath: /secrets
            name: RELEASE-NAME-volume
            readOnly: true
      - equal:
          path: spec.jobTemplate.spec.template.spec.volumes[1]
          value:
            name: RELEASE-NAME-volume
            secret:
              secretName: RELEASE-NAME-volume
  - it: should add env secrets
    set:
      secretEnv:
        ENV: hello
    asserts:
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].envFrom[0]
          value:
            secretRef:
              name: RELEASE-NAME-env

  - it: should add s3 credential environment variables
    set:
      infra:
        s3Bucket:
          name: "s3-bucket-name"
        serviceAccount:
          name: "serviceAccountName"
    asserts:
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "S3_REGION"
            valueFrom:
              secretKeyRef:
                name: s3-bucket-name-s3bucket
                key: region
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "S3_ID"
            valueFrom:
              secretKeyRef:
                name: s3-bucket-name-s3bucket
                key: id
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "S3_ARN"
            valueFrom:
              secretKeyRef:
                name: s3-bucket-name-s3bucket
                key: arn

  - it: should add database credentials environment variables
    set:
      infra:
        postgres:
          name: "database-name"
    asserts:
    - contains:
        path: spec.jobTemplate.spec.template.spec.containers[0].env
        content:
            name: "DATABASE_NAME"
            value: app
    - contains:
        path: spec.jobTemplate.spec.template.spec.containers[0].env
        content:
            name: "DATABASE_HOST"
            valueFrom:
                secretKeyRef:
                  key: host
                  name: database-name-postgres
    - contains:
        path: spec.jobTemplate.spec.template.spec.containers[0].env
        content:
            name: "DATABASE_PORT"
            valueFrom:
                secretKeyRef:
                  key: port
                  name: database-name-postgres
    - contains:
        path: spec.jobTemplate.spec.template.spec.containers[0].env
        content:
            name: "DATABASE_USERNAME"
            valueFrom:
                secretKeyRef:
                  key: username
                  name: database-name-postgres
    - contains:
        path: spec.jobTemplate.spec.template.spec.containers[0].env
        content:
            name: "DATABASE_PASSWORD"
            valueFrom:
                secretKeyRef:
                  key: password
                  name: database-name-postgres
    - contains:
        path: spec.jobTemplate.spec.template.spec.containers[0].env
        content:
            name: DATABASE_URL
            value: postgres://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)
    - contains:
        path: spec.jobTemplate.spec.template.spec.containers[0].env
        content:
            name: JDBC_DATABASE_URL
            value: jdbc:postgresql://$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?user=$(DATABASE_USERNAME)&password=$(DATABASE_PASSWORD)
