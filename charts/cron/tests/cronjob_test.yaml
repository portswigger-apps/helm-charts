suite: Cronjob

templates:
  - cronjob.yaml
tests:
  - it: should create default cronjob
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.schedule
          value: "0 1 31 2 *"
      - equal:
          path: spec.timeZone
          value: "Europe/London"
      - equal:
          path: spec.concurrencyPolicy
          value: Forbid
      - equal:
          path: spec.jobTemplate.spec.parallelism
          value: 1
      - equal:
          path: spec.jobTemplate.spec.backoffLimit
          value: 0
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].image
          value: "public.ecr.aws/nginx/nginx:alpine"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].securityContext
          value:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts
          value:
            - mountPath: /tmp
              name: tmp-volume

  - it: should add volume secrets
    set:
      secretVolume:
        file-name.txt: aGVsbG8K
    asserts:
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts[1]
          value:
            mountPath: /secrets
            name: RELEASE-NAME-volume
            readOnly: true
      - equal:
          path: spec.jobTemplate.spec.template.spec.volumes[1]
          value:
            name: RELEASE-NAME-volume
            secret:
              secretName: RELEASE-NAME-volume
  - it: should add env secrets
    set:
      secretEnv:
        ENV: hello
    asserts:
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].envFrom[0]
          value:
            secretRef:
              name: RELEASE-NAME-env

  - it: should create a Pod with s3Bucket connection details
    set:
      infra:
        s3Bucket:
          enabled: true
    asserts:
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_NAME
            valueFrom:
              secretKeyRef:
                key: id
                name: NAMESPACE-RELEASE-NAME-s3bucket
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_URL
            value: s3://$(S3_BUCKET_NAME)/

  - it: should create a Pod with PostgresInstance connection details
    set:
      infra:
        postgres:
          enabled: true
    asserts:
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_NAME"
            value: app
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_HOST"
            valueFrom:
              secretKeyRef:
                key: host
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PORT"
            valueFrom:
              secretKeyRef:
                key: port
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_USERNAME"
            valueFrom:
              secretKeyRef:
                key: username
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PASSWORD"
            valueFrom:
              secretKeyRef:
                key: password
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: DATABASE_URL
            value: postgres://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: JDBC_DATABASE_URL
            value: jdbc:postgresql://$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?user=$(DATABASE_USERNAME)&password=$(DATABASE_PASSWORD)

  - it: should create Pod with EVENTING_BUS_NAME when configured as a producer
    set:
      infra:
        eventing:
          producer:
            enabled: true
    asserts:
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: EVENTING_BUS_NAME
            value: portswigger

  - it: should create Pod with eventbridge connection details
    set:
      infra:
        eventing:
          consumer:
            enabled: true
    asserts:
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: EVENTING_QUEUE_NAME
            value: NAMESPACE-RELEASE-NAME-events

  - it: should create a Pod with dynamodb details
    set:
      infra:
        dynamodb:
          prefixOverride: override
          tables:
            - name: test
            - name: test2
    asserts:
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: TEST_TABLE_NAME
            value: override-test
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: TEST2_TABLE_NAME
            value: override-test2

  - it: should create a Pod with dynamodb details
    set:
      infra:
        dynamodb:
          create: true
          tables:
            - name: test
            - name: test2
    asserts:
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: TEST_TABLE_NAME
            value: NAMESPACE-RELEASE-NAME-test
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: TEST2_TABLE_NAME
            value: NAMESPACE-RELEASE-NAME-test2