global:
  ingress:
    # global.ingress.host -- Ingress host used to configure cloudfront target
    # @section -- global
    host: ""

  serviceAccount:
    # global.serviceAccount.name -- ServiceAccount name to configure IRSA role and IAM Policies for: s3Bucket
    # @section -- global
    name: ""

postgres:
  # postgres.enabled -- Set to `true` to deploy a `PostgresInstance` resource
  # @section -- postgres
  enabled: false

  # postgres.create -- Set to `false` to skip creation of the `PostgresInstance` if it has been created elsewhere
  # @section -- postgres
  create: true

  # postgres.nameOverride -- Override the `PostgresInstance` name or use with `create: false` to map the secrets of an instance created elsewhere
  # @section -- postgres
  nameOverride: ""

  # postgres.size -- Options: micro, small, medium, large or xlarge
  # @default -- `micro`
  # @section -- postgres
  size: null

  # postgres.version -- Options: 16.2, 15.6 or 14.11
  # @default -- `"16.2"`
  # @section -- postgres
  version: null

  # postgres.multiAz -- (bool) Set to `true` to deploy the `PostgresInstance` across multiple availability zones
  # @default -- `false`
  # @section -- postgres
  multiAz: null

  # postgres.enablePerformanceInsights -- (bool) Set to `true` to enable Performance Insights on the `PostgresInstance`
  # @default -- `false`
  # @section -- postgres
  enablePerformanceInsights: null

s3Bucket:
  # s3Bucket.enabled -- Set to `true` to deploy an `s3Bucket` resource
  # @section -- s3Bucket
  enabled: false

  # s3Bucket.create -- Set to `false` to skip creation of the `s3Bucket` if it has been created elsewhere
  # @section -- s3Bucket
  create: true

  # s3Bucket.nameOverride -- Override the `s3Bucket` name or use with `create: false` to map the secrets of an instance created elsewhere
  # @section -- s3Bucket
  nameOverride: ""

  # s3Bucket.create -- Set to `true` to allow data insights access to the `s3Bucket`
  # @section -- s3Bucket
  enableDataInsights: false

  # s3Bucket.lifecycleRules -- (list) Configure the `s3Bucket` storage [lifecycle rules](https://marketplace.upbound.io/providers/upbound/provider-aws-s3/v1.2.1/resources/s3.aws.upbound.io/BucketLifecycleConfiguration/v1beta1#doc:spec-forProvider-rule)
  # @default -- `[]`
  # @section -- s3Bucket
  lifecycleRules:
    - expiration:
        - days: 0
      status: Disabled

cloudfront:
  # cloudfront.enabled -- Set to `true` to deploy an `CloudFrontSite` resource
  # @section -- cloudfront
  enabled: false

  # cloudfront.hostedZoneId -- The Route53 hosted zone ID to create the certificates and domain names for the `CloudFrontSite` resource
  # @section -- cloudfront
  hostedZoneId: ""

  # cloudfront.domainName -- The presentation domain name for the `CloudFrontSite` resource
  # @section -- cloudfront
  domainName: ""

  # cloudfront.targetOriginDomainName -- The target origin domain name that the `CloudFrontSite` resource fronts
  # @default -- `.Values.global.ingress.host`
  # @section -- cloudfront
  targetOriginDomainName: ""

  # cloudfront.restrictToOffice -- Set to `true` to restrict access to the `CloudFrontSite` to the office IP ranges
  # @default -- `true`
  # @section -- cloudfront
  restrictToOffice: true

  geoRestriction:
    # cloudfront.geoRestriction.restrictionType -- Whether to `allow` or `deny` the configured locations access to the `CloudFrontSite`. Set to `none` to remove all restrictions
    # @section -- cloudfront
    restrictionType: none

    # cloudfront.geoRestriction.locations -- A list of ISO ALPHA-2 country codes to apply restrictions to
    # @section -- cloudfront
    locations: []

  defaultCacheBehavior:
    # cloudfront.defaultCacheBehavior.allowedMethods -- Whether `read` or `all` HTTP methods are allowed by the `CloudFrontSite`
    # @section -- cloudfront
    allowedMethods: read

    # cloudfront.defaultCacheBehavior.minTtl -- The minimum time-to-live for the `CloudFrontSite` cache objects
    # @section -- cloudfront
    minTtl: 0

    # cloudfront.defaultCacheBehavior.maxTtl -- The maximum time-to-live for the `CloudFrontSite` cache objects
    # @section -- cloudfront
    maxTtl: 31536000

    # cloudfront.defaultCacheBehavior.defaultTtl -- The default time-to-live for the `CloudFrontSite` cache objects, applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, or Expires
    # @section -- cloudfront
    defaultTtl: 0

    cookies:
      # cloudfront.defaultCacheBehavior.cookies.behavior -- Whether `All`, `AllExcept`, `None` or `Allowlist`ed cookies are included in the cache key.
      # @section -- cloudfront
      behavior: none

      # cloudfront.defaultCacheBehavior.cookies.allowlistedNames -- A list of cookie names to include in the cache key.
      # @section -- cloudfront
      allowlistedNames: []

    headers:
      # cloudfront.defaultCacheBehavior.headers.behavior -- Whether `None` or `Allowlist`ed headers are included in the cache key.
      # @section -- cloudfront
      behavior: none

      # cloudfront.defaultCacheBehavior.headers.allowlistedNames -- A list of header names to include in the cache key.
      # @section -- cloudfront
      allowlistedNames: []

    queryStrings:
      # cloudfront.defaultCacheBehavior.queryStrings.behavior -- Whether `All`, `AllExcept`, `None` or `Allowlist`ed  query parameters are included in the cache key.
      # @section -- cloudfront
      behavior: none

      # cloudfront.defaultCacheBehavior.queryStrings.allowlistedNames -- A list of query parameter names to include in the cache key.
      # @section -- cloudfront
      allowlistedNames: []

redis:
  # redis.enabled -- Set to `true` to deploy a `RedisCluster` resource
  # @section -- redis
  enabled: false
  # redis.nodeGroups -- (int) Set the number of node groups for the `RedisCluster`
  # @section -- redis
  nodeGroups: 1
  # redis.replicasPerNodeGroup -- Set the number of replicas per node group for the `RedisCluster`
  # @section -- redis
  replicasPerNodeGroup: 0
  # redis.size -- Options: micro, small, medium, large or xlarge
  # @default -- `micro`
  # @section -- redis
  size: micro
  # redis.version -- Options: 7.1, 7.0
  # @default -- `7.1`
  # @section -- redis
  version: "7.1"
  # redis.multiAz -- (bool) Set to `true` to deploy the `RedisCluster` across multiple availability zones
  # @default -- `false`
  # @section -- redis
  multiAz: false

bedrock:
  # bedrock.enabled -- Set to `true` to deploy an IAM policy and role to be attached to your application to enable bedrock access.
  # @section -- bedrock
  enabled: false
