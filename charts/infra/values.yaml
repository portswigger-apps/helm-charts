global:
  ingress:
    # global.ingress.host -- Ingress host used to configure cloudfront target
    # @section -- global
    host: ""

  serviceAccount:
    # global.serviceAccount.name -- ServiceAccount name to configure IRSA role and IAM Policies for: s3Bucket
    # @section -- global
    name: ""

postgres:
  # postgres.enabled -- Set to `true` to deploy a `PostgresInstance` resource
  # @section -- postgres
  enabled: false

  # postgres.create -- Set to `false` to skip creation of the `PostgresInstance` if it has been created elsewhere
  # @section -- postgres
  create: true

  # postgres.nameOverride -- Override the `PostgresInstance` name or use with `create: false` to map the secrets of an instance created elsewhere
  # @section -- postgres
  nameOverride: ""

  # postgres.size -- Options: micro, small, medium, large or xlarge
  # @default -- `micro`
  # @section -- postgres
  size: null

  # postgres.version -- Options: 16.2, 15.6 or 14.11
  # @default -- `"16.2"`
  # @section -- postgres
  version: null

  # postgres.multiAz -- (bool) Set to `true` to deploy the `PostgresInstance` across multiple availability zones
  # @default -- `false`
  # @section -- postgres
  multiAz: null

  # postgres.enablePerformanceInsights -- (bool) Set to `true` to enable Performance Insights on the `PostgresInstance`
  # @default -- `false`
  # @section -- postgres
  enablePerformanceInsights: null

s3Bucket:
  # s3Bucket.enabled -- Set to `true` to deploy an `s3Bucket` resource
  # @section -- s3Bucket
  enabled: false

  # s3Bucket.create -- Set to `false` to skip creation of the `s3Bucket` if it has been created elsewhere
  # @section -- s3Bucket
  create: true

  # s3Bucket.nameOverride -- Override the `s3Bucket` name or use with `create: false` to map the secrets of an instance created elsewhere
  # @section -- s3Bucket
  nameOverride: ""

  # s3Bucket.enableDataInsights -- Set to `true` to allow data insights access to the `s3Bucket`
  # @section -- s3Bucket
  enableDataInsights: false

  # s3Bucket.lifecycleRules -- (list) Configure the `s3Bucket` storage [lifecycle rules](https://marketplace.upbound.io/providers/upbound/provider-aws-s3/v1.2.1/resources/s3.aws.upbound.io/BucketLifecycleConfiguration/v1beta1#doc:spec-forProvider-rule)
  # @default -- `[]`
  # @section -- s3Bucket
  lifecycleRules:
    - expiration:
        - days: 0
      status: Disabled

cloudfront:
  # cloudfront.enabled -- Set to `true` to deploy an `CloudFrontSite` resource
  # @section -- cloudfront
  enabled: false

  # cloudfront.hostedZoneId -- The Route53 hosted zone ID to create the certificates and domain names for the `CloudFrontSite` resource
  # @section -- cloudfront
  hostedZoneId: ""

  # cloudfront.domainName -- The presentation domain name for the `CloudFrontSite` resource
  # @section -- cloudfront
  domainName: ""

  # cloudfront.targetOriginDomainName -- The target origin domain name that the `CloudFrontSite` resource fronts
  # @default -- `.Values.global.ingress.host`
  # @section -- cloudfront
  targetOriginDomainName: ""

  # cloudfront.restrictToOffice -- Set to `true` to restrict access to the `CloudFrontSite` to the office IP ranges
  # @default -- `true`
  # @section -- cloudfront
  restrictToOffice: true

  geoRestriction:
    # cloudfront.geoRestriction.restrictionType -- Whether to `allow` or `deny` the configured locations access to the `CloudFrontSite`. Set to `none` to remove all restrictions
    # @section -- cloudfront
    restrictionType: none

    # cloudfront.geoRestriction.locations -- A list of ISO ALPHA-2 country codes to apply restrictions to
    # @section -- cloudfront
    locations: []

  defaultCacheBehavior:
    # cloudfront.defaultCacheBehavior.allowedMethods -- Whether `read` or `all` HTTP methods are allowed by the `CloudFrontSite`
    # @section -- cloudfront
    allowedMethods: read

    # cloudfront.defaultCacheBehavior.grpcEnabled -- Enable gRPC protocol support (requires allowedMethods: all for POST method)
    # @section -- cloudfront
    grpcEnabled: false

    # cloudfront.defaultCacheBehavior.minTtl -- The minimum time-to-live for the `CloudFrontSite` cache objects
    # @section -- cloudfront
    minTtl: 0

    # cloudfront.defaultCacheBehavior.maxTtl -- The maximum time-to-live for the `CloudFrontSite` cache objects
    # @section -- cloudfront
    maxTtl: 31536000

    # cloudfront.defaultCacheBehavior.defaultTtl -- The default time-to-live for the `CloudFrontSite` cache objects, applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, or Expires
    # @section -- cloudfront
    defaultTtl: 0

    cookies:
      # cloudfront.defaultCacheBehavior.cookies.behavior -- Whether `All`, `AllExcept`, `None` or `Allowlist`ed cookies are included in the cache key.
      # @section -- cloudfront
      behavior: none

      # cloudfront.defaultCacheBehavior.cookies.allowlistedNames -- A list of cookie names to include in the cache key.
      # @section -- cloudfront
      allowlistedNames: []

    headers:
      # cloudfront.defaultCacheBehavior.headers.behavior -- Whether `None` or `Allowlist`ed headers are included in the cache key.
      # @section -- cloudfront
      behavior: none

      # cloudfront.defaultCacheBehavior.headers.allowlistedNames -- A list of header names to include in the cache key.
      # @section -- cloudfront
      allowlistedNames: []

    queryStrings:
      # cloudfront.defaultCacheBehavior.queryStrings.behavior -- Whether `All`, `AllExcept`, `None` or `Allowlist`ed  query parameters are included in the cache key.
      # @section -- cloudfront
      behavior: none

      # cloudfront.defaultCacheBehavior.queryStrings.allowlistedNames -- A list of query parameter names to include in the cache key.
      # @section -- cloudfront
      allowlistedNames: []

redis:
  # redis.enabled -- Set to `true` to deploy a `RedisCluster` resource
  # @section -- redis
  enabled: false
  # redis.size -- The size of the Redis instance
  # @section -- redis
  size: micro
  # redis.version -- Options: "7"
  # @default -- `7`
  # @section -- redis
  version: "7"
  # @ignored
  dnsToken: notr34l

bedrock:
  # bedrock.enabled -- Set to `true` to deploy an IAM policy and role to be attached to your application to enable bedrock access.
  # @section -- bedrock
  enabled: false

cloudfrontrouter:
  # cloudfrontrouter.enabled -- Set to `true` to deploy an `CloudFrontRouter` resource
  # @section -- cloudfront router
  enabled: false
  # cloudfrontrouter.domainName -- The presentation domain name for the `CloudFrontRouter` resource
  # @section -- cloudfront router
  domainName: ""
  # cloudfrontrouter.acmCertificateARN -- The presentation domain name for the `CloudFrontRouter` resource
  # @section -- cloudfront router
  acmCertificateARN: ""
  # cloudfrontrouter.origins -- A map of custom origins to be used by path configurations
  # @section -- cloudfront router
  origins: []
    # # Custom origin MUST be available on 443 TLS 1.2+
    # - originId: website # this is id
    #   domainName: site.portswigger.net # This is custom origin hostname
    # - originId: website-static-cms
    #   domainName: website-cms-site.platform-dev.portswigger.io

  # cloudfrontrouter.orderedCacheBehavior -- An ordered list of paths to direct to different origins
  # @section -- cloudfront router
  orderedCacheBehavior: []
    # - pathPattern: /users/*
    #   targetOriginId: website
    #   # cachePolicyName: CachingDisabled
    # - pathPattern: /landing-page/pro
    #   targetOriginId: website-static-cms
    #   cachePolicyName: CachingOptimized
    # - pathPattern: /content/*
    #   targetOriginId: website-static-cms
    #   cachePolicyName: CachingOptimized
    # - pathPattern: /content/new/*
    #   targetOriginId: website-static-cms

  # cloudfrontrouter.default -- Values for the default origin config
  # @section -- cloudfront router
  default:
    cachePolicyName: CachingDisabled
    customCachePolicyName: ""
    cachePolicyId: ""
    domainName: ""
    originReadTimeout: ""
    originKeepaliveTimeout: ""
    originRequestPolicyName: AllViewerExceptHostHeader
    originRequestPolicyId: ""

  # cloudfrontrouter.customCachePolicies -- Values for dynamic custom cache policies
  # @section -- cloudfront router
  customCachePolicies: {}
    # See: https://marketplace.upbound.io/providers/upbound/provider-aws-cloudfront/latest/resources/cloudfront.aws.upbound.io/CachePolicy/v1beta2
    # web-update=downloads:
    #    defaultTtl: 3600
    #    maxTtl: 86400
    #    minTtl: 600
    #    parametersInCacheKeyAndForwardedToOrigin:
    #      enableAcceptEncodingBrotli: true
    #      enableAcceptEncodingGzip: true
    #      cookiesConfig:
    #        cookieBehavior: "none"
    #      headersConfig:
    #        headerBehavior: "none"
    #      queryStringsConfig:
    #        queryStringBehavior: "allExcept"
    #        queryStrings:
    #          items:
    #          - license

  # cloudfrontrouter.restrictToOffice -- Set to `true` to restrict access to the `CloudFrontRouter` to the office IP ranges
  # @default -- `true`
  # @section -- cloudfront router
  restrictToOffice: true
  # cloudfrontrouter.hostedZoneId -- The Route53 hosted zone ID to create the certificates and domain names for the `CloudFrontRouter` resource
  # @section -- cloudfront router
  hostedZoneId: ""

eventing:
  producer:
    # eventing.producer.enabled -- Set to `true` to deploy an IAM policy and role to be attached to your application to enable eventbridge access.
    # @section -- eventing
    enabled: false
  consumer:
    # eventing.consumer.enabled -- Set to `true` to deploy an Event Rule.
    # @section -- eventing
    enabled: false
    # See https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html
    # eventing.consumer.eventPattern -- The pattern the rule should use to decide whether to send an event
    # @section -- eventing
    eventPattern: ""
    # See https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-transform-target-input.html#eb-transform-input-examples
    # eventing.consumer.inputPath -- An optional method to extract specific data from events
    # @section -- eventing
    inputPath: ""

kinesis:
  # kinesis.enabled -- Set to `true` to deploy an IAM policy and role attached to your application to allow assuming a Kinesis stream role
  # @section -- kinesis
  enabled: false
  # kinesis.streamName -- Set to the name of the Kinesis stream. Required if `kinesis.enabled` is `true`
  # @section -- kinesis
  streamName: ""

dynamodb:
  # infra.dynamodb.create -- Set to `false` to skip creation of the dynamodb tables if they have been created elsewhere
  # @section -- dynamodb
  create: true
  # infra.dynamodb.nameOverride -- Use with `create: false` to grant a policy access to tables created elsewhere
  # @section -- dynamodb
  prefixOverride: ""
  # dynamodb.tables -- A list containing details about dynamodb tables
  # @section -- dynamodb
  tables: []
#  - name: tableTest
#    attributes:
#      - name: a1
#        type: String
#      - name: a2
#        type: binary
#      - name: a3
#        type: number
#      - name: a4
#        type: string
#    partitionKey: a1
#    sortKey: a2
#    gsis:
#      - partitionKey: a3
#        sortKey: a4
#    lsis:
#      - a4

opensearch:
  # opensearch.create -- Set to `false` to skip creation of the opensearch collection if it has been created elsewhere
  # @section -- opensearch
  create: true
  # opensearch.nameOverride -- Use with `create: false` to map the secrets of an instance created elsewhere
  # @section -- opensearch
  nameOverride: ""
  # opensearch.enabled -- Set to `true` to deploy an opensearch collection
  # @section -- opensearch
  enabled: false
  # opensearch.type -- The type of the collection. Must be either TIMESERIES, VECTORSEARCH, or SEARCH
  # @section -- opensearch
  type: "TIMESERIES"
  # opensearch.standbyReplicas -- Set to 'true' to use standby replicas for the collection.
  # @section -- opensearch
  standbyReplicas: false
  # opensearch.lifecycleRules -- A list of rules configuring the retention period of indexes
  # @section -- opensearch
  lifecycleRules: []
#    - resource: "examples/*"
#      retainIndefinitely: false
#      retentionPeriod: "15d"