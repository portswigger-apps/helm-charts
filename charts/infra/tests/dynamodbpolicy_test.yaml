suite: DynamoDBPolicy

templates:
  - dynamodbpolicy.yaml

tests:
  - it: should not create a DynamoDBPolicy by default
    asserts:
      - hasDocuments:
          count: 0

  - it: should not create a DynamoDBPolicy if no tables
    set:
      dynamodb:
        create: false
        prefixOverride: "abcde"
    asserts:
      - hasDocuments:
          count: 0

  - it: should create a DynamoDBPolicy if create is false
    set:
      dynamodb:
        create: false
        tables:
          - name: test
            attributes:
              - name: a1
                type: string
            partitionKey: a1
    asserts:
      - hasDocuments:
          count: 1

  - it: should create a DynamoDBPolicy with overridden table names if create is false
    set:
      dynamodb:
        create: false
        prefixOverride: new-override
        tables:
          - name: test
            attributes:
              - name: a1
                type: string
            partitionKey: a1
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.name
          value: NAMESPACE-RELEASE-NAME
      - equal:
          path: spec.tables[0]
          value: new-override-test

  - it: should create a DynamoDBPolicy with overridden table names if create is true
    set:
      dynamodb:
        prefixOverride: new-override
        tables:
          - name: test
            attributes:
              - name: a1
                type: string
            partitionKey: a1
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.name
          value: NAMESPACE-RELEASE-NAME
      - equal:
          path: spec.tables[0]
          value: new-override-test

  - it: should create a DynamoDBPolicy if tables are configured
    set:
      dynamodb:
        tables:
          - name: test
            attributes:
              - name: a1
                type: string
            partitionKey: a1
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.name
          value: NAMESPACE-RELEASE-NAME
      - equal:
          path: spec.irsaRoleName
          value: NAMESPACE-RELEASE-NAME-irsarole
      - equal:
          path: spec.tables[0]
          value: NAMESPACE-RELEASE-NAME-test

  - it: should create a DynamoDBPolicy with configured values
    set:
      global:
        serviceAccount:
          name: my-cool-service-account
      dynamodb:
        tables:
          - name: test
            attributes:
              - name: a1
                type: string
            partitionKey: a1
    asserts:
      - equal:
          path: spec.irsaRoleName
          value: my-cool-service-account-irsarole

  - it: should create a DynamoDBPolicy with the correct table names
    set:
      global:
        serviceAccount:
          name: my-cool-service-account
      dynamodb:
        tables:
          - name: test
            attributes:
              - name: a1
                type: string
            partitionKey: a1
          - name: test2
            attributes:
              - name: a2
                type: string
            partitionKey: a2
    asserts:
      - equal:
          path: spec.irsaRoleName
          value: my-cool-service-account-irsarole
      - equal:
          path: spec.tables[0]
          value: NAMESPACE-RELEASE-NAME-test
      - equal:
          path: spec.tables[1]
          value: NAMESPACE-RELEASE-NAME-test2