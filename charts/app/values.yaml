global:
  aws:
    # global.aws.accountId -- The AWS account that this application is being deployed into
    # @default -- Taken from deployment pipeline environment
    # @section -- global
    accountId: ""
    # global.aws.region -- The AWS region that this application is being deployed into.
    # @section -- global
    # @ignored
    region: "eu-west-1"
  ingress:
    # global.ingress.enabled -- Set to `true` to expose the application with a Kubernetes `Ingress`
    # @section -- global
    enabled: false
    # global.ingress.host -- Ingress host used to configure cloudfront target
    # @section -- global
    host: ""
    # global.ingress.extraHosts -- Extra Ingress hosts used to configure extra host headers recognized by Traefik
    # @section -- global
    extraHosts: []
    # global.ingress.annotations -- Set annotations on the `Ingress`
    # @section -- global
    annotations: {}
    # global.ingress.className --  Override the `Ingress` class. In most cases this should be left as default
    # @section -- global
    className: "traefik"
    # global.ingress.paths -- Path prefixes that you want to make available externally with the `Ingress`
    # @section -- global
    paths:
      - "/"
    # global.ingress.customResponseHeaders -- Add custom response headers to an apps `Ingress`
    # @section -- global
    customResponseHeaders:
      X-Robots-Tag: noindex
    # global.ingress.allowFromOffice --Allow access to the Traefik `Ingress` from PortSwigger office IP ranges
    # @section -- global
    allowFromOffice: true
    # global.ingress.allowFromOfficeCIDRs -- PortSwigger office IP ranges
    # @section -- global
    # @ignored
    allowFromOfficeCIDRs:
      - 164.39.15.192/29
      - 217.138.234.184/29
      - 52.211.196.189/32
      - 57.133.217.203/32
    # global.ingress.ipAllowListCIDRs -- Extra IP CIDR ranges to allow access from.
    # @section -- global
    ipAllowListCIDRs: []
    authentication:
      # global.ingress.authentication.enabled -- Set to `true` to require SSO authentication to access the application.
      # @section -- global
      enabled: false
    # global.ingress.allowFromCloudfront -- Allow access to the Traefik `Ingress` from Cloudfront IP ranges
    # @section -- global
    allowFromCloudfront: false
    # global.ingress.stripPrefixes -- A list of prefixes to strip from requests.
    # @section -- global
    stripPrefixes: []
  serviceAccount:
    # global.serviceAccount.enabled -- Set to `false` to prevent the `ServiceAccount` from being created
    # @section -- global
    enabled: true
    # global.serviceAccount.name -- `ServiceAccount` name. Use with `global.serviceAccount.enabled: false`
    # to use an existing `ServiceAccount`
    # @default -- `.Release.Name`
    # @section -- global
    name: ""
    # global.serviceAccount.automountServiceAccountToken -- Set to `true` to mount tokens for access to the Kubernetes API. This should almost always be `false`
    # @section -- global
    automountServiceAccountToken: false
    # global.serviceAccount.annotations -- Set annotations on the `ServiceAccount`
    # @section -- global
    annotations: {}
image:
  # image.name -- The container image of your application
  # @section -- application
  name: "public.ecr.aws/nginx/nginx"
  # image.tag -- The tag for the image that you want to deploy
  # @section -- application
  tag: "alpine"
# args -- Arguments to be passed to your application container
# @section -- application
args: []
# env -- **Non-secret** environment variables to configure your application. Formatted as `ENV_VAR_NAME: env-var-value`
# @section -- application
env: {}
# envFrom -- Create environment variables from `Secret` or `ConfigMap` resources.
# See https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
# @section -- application
envFrom: []
# secretEnv -- Secret values that are mounted as environment variables. Formatted as `ENV_VAR_NAME: env-var-value`
# in a SOPS encrypted `secrets.yaml` file
# @section -- application
secretEnv: {}
# secretVolume -- Secret values that will be available as files in `/secrets` inside the container.
# Formatted as `file.name: <base64 encoded file>`
# @section -- application
secretVolume: {}
deployment:
  # deployment.replicas -- The minimum number of replicas of the application
  # @section -- application
  replicas: 1
  # deployment.maxReplicas -- (int) The maximum number of replicas of the application
  # @default -- `.Values.deployment.replicas`
  # @section -- application
  maxReplicas: null
  # deployment.averageCpuUtilization -- (int) The target average CPU utilization percentage for the HorizontalPodAutoscaler
  # @default -- `9`
  # @section -- application
  averageCpuUtilization: 95
  # deployment.averageMemoryUtilization -- (int) The target average Memory utilization percentage for the HorizontalPodAutoscaler
  # @default -- `disabled`
  # @section -- application
  averageMemoryUtilization: null
  # deployment.customAutoscalingMetrics -- (list) Advanced: A list of custom metrics scalers.
  # @default -- `disabled`
  # @section -- application
  customAutoscalingMetrics: []
  # - type: Pods
  #   pods:
  #     metric:
  #       name: jetty_connections_current_connections
  #     target:
  #       type: AverageValue
  #       averageValue: "160"
  terminationDelay:
    # @ignored
    # deployment.terminationDelay.enabled -- Set to `true` to add a sleeping preStop hook.
    # @section -- application
    enabled: false
    # @ignored
    # deployment.terminationDelay.delaySeconds -- The number of seconds the pod will stay in `terminating` state before a SIGTERM is sent
    # @section -- application
    delaySeconds: 15
ports:
  app-port:
    # ports.app-port.port -- The port the application is listening on
    # @section -- application
    port: 8080
    # ports.app-port.protocol -- The protocol the application uses. This should alost always be TCP
    # @section -- application
    protocol: TCP
    # ports.app-port.expose -- Whether the port should be accessible to the cluster and outside world
    # @section -- application
    expose: true
metricsEndpoint:
  # metricsEndpoint.enabled -- Set to `false` to remove `PodMonitor``
  # @section -- application
  # @ignored
  enabled: true
  # metricsEndpoint.path -- The path to a Prometheus compatible metrics endpoint
  # @section -- application
  path: /metrics
  # metricsEndpoint.port -- The name of the port that the metrics endpoint is listening on
  # @section -- application
  port: app-port
  # metricsEndpoint.honorLabels -- When `true`, honorLabels preserves the metric's labels when they collide with the target's labels.
  # @section -- application
  honorLabels: false
  # metricsEndpoint.interval -- The interval at which metrics are scraped from the endpoint
  # @section -- application
  interval: 15s
healthcheckEndpoint:
  # healthcheckEndpoint.path -- The path of the applications HTTP healthcheck endpoint
  # @section -- application
  path: /health
  # healthcheckEndpoint.port -- TThe name of the port that the healthcheck endpoint is listening on
  # @section -- application
  port: app-port
resources:
  # resources.cpu -- Requested CPU time for the pod
  # @section -- application
  cpu: "100m"
  # resources.memory -- Maximum memory usage for the pod
  # @section -- application
  memory: "64Mi"
pod:
  # pod.additionalVolumes -- Configuration for additional volumes. See example in values.yaml
  additionalVolumes: []
  # - name: dsdsocket
  #   hostPath:
  #     path: /var/run/statsd-exporter

  # pod.additionalVolumeMounts -- Configuration for additional volume mounts. References additionalVolumes, see example in values.yaml
  additionalVolumeMounts: []
  # - name: dsdsocket
  #   mountPath: /socket

  # pod.labels -- Additional labels to add to pods
  labels: {}
  # pod.annotations -- Additional annotations to add to pods
  annotations: {}
  # pod.nodeSelector -- Set a nodeSelector(s) on your pods
  nodeSelector: {}
podLogs:
  # podLogs.pipelineStages -- Grafana logging agent [pipeline stage](https://grafana.com/docs/loki/latest/send-data/promtail/pipelines/). Only available on v1alpha1
  pipelineStages: []
# initContainers -- Configuration for [init containers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/), which are containers that run before the app container is started.
# @section == application
initContainers: []
# - name: init-myservice
#   image: nginx
#   command: ['sh', '-c', "echo 'output'"]

service:
  # service.enabled -- Set to true to expose your application within the Kubernetes cluster
  # @section -- network
  enabled: true
  # service.labels -- Add labels to the Service resource
  # @section -- network
  labels: {}
  # service.annotations -- Add annotations to the Service resource
  # @section -- network
  annotations: {}
ciliumNetworkPolicy:
  # ciliumNetworkPolicy.enabled -- Set to false to remove the CiliumNetworkPolicy. You should keep it and configure it
  # @section -- network
  # @ignored
  enabled: true
  # ciliumNetworkPolicy.ingress -- Cilium ingress rules. See examples in values.yaml
  # @section -- network
  ingress: []
  # fromEndpoints:
  # - matchLabels:
  #     app.kubernetes.io/name: frontend # Pods with this label will be able to access your application
  #   toPorts:
  #     - ports:
  #       - port: "8080"
  #         protocol: TCP

  # ciliumNetworkPolicy.egress -- Cilium egress rules. See examples in values.yaml
  # @section -- network
  egress: []
  # - toFQDNs:
  #   - matchName: "my-remote-service.com"
  #   toPorts:
  #     - ports:
  #         - port: "443"
  #           protocol: TCP

  #ciliumNetworkPolicy.externalHttpsServices -- A list of external domain names that your app depends on. See examples in values.yaml
  # @section -- network
  externalHttpsServices: []
  #  - discord.com
  #  - api.openai.com
  #  - api.zoom.us

  # ciliumNetworkPolicy.fromApps -- A list of app names and optional namespace to allow ingress from. See examples in values.yaml
  # @section -- network
  fromApps: []
  # - name: hakawai-gateway
  # - name: email-marketing
  #   namespace: web

  # ciliumNetworkPolicy.toApps -- A list of app names and optional namespace to allow egress to. See examples in values.yaml
  # @section -- network
  toApps: []
  # - name: hakawai-hello-service
  # - name: license-checker
  #   namespace: web

  # @ignored
  ingressControllerEndpointMatchLabels:
    k8s:io.kubernetes.pod.namespace: ingress
    app.kubernetes.io/name: traefik
  # @ignored
  observabilityAgentEndpointMatchLabels:
    k8s:io.kubernetes.pod.namespace: observability
    app.kubernetes.io/name: alloy
infra:
  postgres:
    # infra.postgres.enabled -- Set to `true` to deploy a `PostgresInstance` resource
    # @section -- infra
    enabled: false
    # infra.postgres.create -- Set to `false` to skip creation of the `PostgresInstance` if it has been created elsewhere
    # @section -- infra
    create: true
    # infra.postgres.nameOverride -- Override the `PostgresInstance` name or use with `create: false` to map the secrets of an instance created elsewhere
    # @section -- infra
    nameOverride: ""
    # infra.postgres.size -- Options: micro, small, medium, large or xlarge
    # @default -- `micro`
    # @section -- infra
    size: null
    # infra.postgres.version -- Options: 16.2, 16.3 or 16.4
    # @default -- `"16.4"`
    # @section -- infra
    version: null
    # infra.postgres.multiAz -- (bool) Set to `true` to deploy the `PostgresInstance` across multiple availability zones
    # @default -- `false`
    # @section -- infra
    multiAz: null
    # infra.postgres.enablePerformanceInsights -- (bool) Set to `true` to enable Performance Insights on the `PostgresInstance`
    # @default -- `false`
    # @section -- infra
    enablePerformanceInsights: null
  s3Bucket:
    # infra.s3Bucket.enabled -- Set to `true` to deploy an `s3Bucket` resource
    # @section -- infra
    enabled: false
    # infra.s3Bucket.create -- Set to `false` to skip creation of the `s3Bucket` if it has been created elsewhere
    # @section -- infra
    create: true
    # infra.s3Bucket.nameOverride -- Override the `s3Bucket` name or use with `create: false` to map the secrets of an instance created elsewhere
    # @section -- infra
    nameOverride: ""
    # infra.s3Bucket.lifecycleRules -- (list) Configure the `s3Bucket` storage [lifecycle rules](https://marketplace.upbound.io/providers/upbound/provider-aws-s3/v1.2.1/resources/s3.aws.upbound.io/BucketLifecycleConfiguration/v1beta1#doc:spec-forProvider-rule)
    # @default -- `[]`
    # @section -- infra
    lifecycleRules:
      - expiration:
          - days: 0
        status: Disabled
    # infra.s3Bucket.enableDataInsights -- (list) Add IAM Role & IAM policy for data insight access to the `s3Bucket`
    # @default -- `false`
    # @section -- infra
    enableDataInsights: false
  cloudfrontrouter:
    # infra.cloudfrontrouter.enabled -- Set to `true` to deploy an `CloudFrontRouter` resource. Advanced resource.
    # @section -- infra
    # @ignored
    enabled: false
  cloudfront:
    # infra.cloudfront.enabled -- Set to `true` to deploy an `CloudFrontSite` resource
    # @section -- infra
    enabled: false
    # infra.cloudfront.hostedZoneId -- The Route53 hosted zone ID to create the certificates and domain names for the `CloudFrontSite` resource
    # @section -- infra
    hostedZoneId: ""
    # infra.cloudfront.domainName -- The presentation domain name for the `CloudFrontSite` resource
    # @section -- infra
    domainName: ""
    # infra.cloudfront.targetOriginDomainName -- The target origin domain name that the `CloudFrontSite` resource fronts
    # @default -- `.Values.global.ingress.host`
    # @section -- infra
    targetOriginDomainName: ""
    # infra.cloudfront.restrictToOffice -- Set to `false` to allow access to the `CloudFrontSite` outside of the office IPs. (managed outside of app-chart)
    # @section -- infra
    restrictToOffice: true
    # infra.cloudfront.originHeaderAuth -- Set to 'true' to enable authentication between CloudFront and the origin
    # @section -- infra
    originHeaderAuth: true
    defaultCacheBehavior:
      # infra.cloudfront.defaultCacheBehavior.allowedMethods -- Whether `read` or `all` HTTP methods are allowed by the `CloudFrontSite`
      # @section -- infra
      allowedMethods: read
      # infra.cloudfront.defaultCacheBehavior.minTtl -- The minimum time-to-live for the `CloudFrontSite` cache objects
      # @section -- infra
      minTtl: 0
      # infra.cloudfront.defaultCacheBehavior.maxTtl -- The maximum time-to-live for the `CloudFrontSite` cache objects
      # @section -- infra
      maxTtl: 31536000
      # infra.cloudfront.defaultCacheBehavior.defaultTtl -- The default time-to-live for the `CloudFrontSite` cache objects, applies only when your origin does not add HTTP headers such as Cache-Control max-age, Cache-Control s-maxage, or Expires
      # @section -- infra
      defaultTtl: 0
  redis:
    # infra.redis.enabled -- Set to `true` to deploy a `RedisCluster` resource
    # @section -- infra
    enabled: false
    # infra.redis.size -- Options: micro, small, medium, large or xlarge
    # @default -- `micro`
    # @section -- infra
    size: micro
    # infra.redis.version -- Options: 7
    # @default -- `7`
    # @section -- infra
    version: "7"
  bedrock:
    # infra.bedrock.enabled -- Set to `true` to deploy an IAM policy and role to be attached to your application to enable bedrock access.
    # @section -- infra
    enabled: false
  eventing:
    producer:
      # infra.eventing.producer.enabled -- Set to `true` to deploy an IAM policy and role to be attached to your application to enable eventbridge access.
      # @section -- infra
      enabled: false
      # infra.eventing.producer.eventBusName -- The EventBridge Bus name that applications should send to.
      # @section -- infra
      # @ignored
      eventBusName: "portswigger"
    consumer:
      # infra.eventing.consumer.enabled -- Set to `true` to deploy an eventrule.
      # @section -- infra
      enabled: false
      # See https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html
      # infra.eventing.consumer.eventPattern -- The pattern the rule should use to decide whether to send an event
      # @section -- infra
      eventPattern: ""
      # See https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-transform-target-input.html#eb-transform-input-examples
      # infra.eventing.consumer.inputPath -- An optional method to extract specific data from events
      # @section -- infra
      inputPath: ""
  kinesis:
    # infra.kinesis.enabled -- Set to `true` to deploy an IAM policy and role attached to your application to allow assuming a Kinesis stream role
    # @section -- infra
    enabled: false
    # infra.kinesis.streamName -- Set to the name of the Kinesis stream. Required if `kinesis.enabled` is `true`
    # @section -- infra
    streamName: ""

  dynamodb:
    # infra.dynamodb.create -- Set to `false` to skip creation of the dynamodb tables if they have been created elsewhere
    # @section -- infra
    create: true
    # infra.dynamodb.nameOverride -- Use with `create: false` to grant a policy access to tables created elsewhere
    # @section -- infra
    prefixOverride: ""
    # infra.dynamodb.tables -- A list containing details about dynamodb tables
    # @section -- infra
    tables: []
#   - name: tableTest
#     attributes:
#       - name: a1
#         type: String
#       - name: a2
#         type: binary
#       - name: a3
#         type: number
#       - name: a4
#         type: string
#     partitionKey: a1
#     sortKey: a2
#     gsis:
#       - partitionKey: a3
#         sortKey: a4
#     lsis:
#       - a4

  opensearch:
    # infra.opensearch.create -- Set to `false` to skip creation of the opensearch collection if it has been created elsewhere
    # @section -- infra
    create: true
    # infra.opensearch.nameOverride -- Use with `create: false` to map the secrets of an instance created elsewhere
    # @section -- infra
    nameOverride: ""
    # infra.opensearch.enabled -- Set to `true` to deploy an opensearch collection
    # @section -- infra
    enabled: false
    # infra.opensearch.type -- The type of the collection. Must be either TIMESERIES, VECTORSEARCH, or SEARCH
    # @section -- infra
    type: "TIMESERIES"
    # infra.opensearch.standbyReplicas -- Set to 'true' to use standby replicas for the collection.
    # @section -- infra
    standbyReplicas: false
    # infra.opensearch.lifecycleRules -- A list of rules configuring the retention period of indexes
    # @section -- infra
    lifecycleRules: []
  #    - resource: "examples/*"
  #      retainIndefinitely: false
  #      retentionPeriod: "15d"


# extraDeploy -- Extra Kubernetes configuration
extraDeploy: []
# preDeployCommand -- (string[]) Command to run before install and upgrade of your application. See examples in values.yaml
preDeployCommand: []
# - python
# - manage.py
# - migrate

# preRollbackCommand -- (string[]) Command to run before a rollback. See examples in values.yaml
preRollbackCommand: []
# - python
# - manage.py
# - rollback
