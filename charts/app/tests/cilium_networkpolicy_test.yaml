suite: CiliumNetworkPolicy

templates:
  - cilium/networkpolicy.yaml

tests:
  - it: should create a CiliumNetworkPolicy by default
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: CiliumNetworkPolicy

  - it: should allow egress to kube-dns ONLY by default
    asserts:
      - equal:
          path: spec.egress
          value:
            - toEndpoints:
                - matchLabels:
                    k8s-app: kube-dns
                    k8s:io.kubernetes.pod.namespace: kube-system
              toPorts:
                - ports:
                    - port: "53"
                      protocol: ANY
                  rules:
                    dns:
                      - matchPattern: "*"

  - it: should allow ingress from self by default
    asserts:
      - contains:
          path: spec.ingress
          content:
            fromEndpoints:
              - matchLabels:
                  app.kubernetes.io/app: RELEASE-NAME
                  app.kubernetes.io/instance: app-RELEASE-NAME
                  k8s:io.kubernetes.pod.namespace: NAMESPACE
            toPorts:
              - ports:
                  - port: "8080"
                    protocol: TCP

  - it: should allow ingress from configured apps
    set:
      ciliumNetworkPolicy:
        fromApps:
          - name: admin-ui
          - name: api-gateway
            namespace: ingress
    asserts:
      - contains:
          path: spec.ingress
          content:
            fromEndpoints:
              - matchLabels:
                  app.kubernetes.io/app: RELEASE-NAME
                  app.kubernetes.io/instance: app-RELEASE-NAME
                  k8s:io.kubernetes.pod.namespace: NAMESPACE
              - matchLabels:
                  app.kubernetes.io/app: admin-ui
                  k8s:io.kubernetes.pod.namespace: NAMESPACE
              - matchLabels:
                  app.kubernetes.io/app: api-gateway
                  k8s:io.kubernetes.pod.namespace: ingress
            toPorts:
              - ports:
                  - port: "8080"
                    protocol: TCP

  - it: should allow ingress from the observability agent by default
    asserts:
      - contains:
          path: spec.ingress
          content:
            fromEndpoints:
              - matchLabels:
                  k8s:io.kubernetes.pod.namespace: observability
                  app.kubernetes.io/name: grafana-agent
            toPorts:
              - ports:
                  - port: "8080"
                    protocol: TCP

  - it: should allow ingress from the observability agent to configured metrics ports
    set:
      ports:
        metrics-port:
          port: 8081
          protocol: TCP
      metricsEndpoint:
        path: /metrics
        port: metrics-port
    asserts:
      - contains:
          path: spec.ingress
          content:
            fromEndpoints:
              - matchLabels:
                  k8s:io.kubernetes.pod.namespace: observability
                  app.kubernetes.io/name: grafana-agent
            toPorts:
              - ports:
                  - port: "8081"
                    protocol: TCP

  - it: should allow access from ingress controller if configured
    set:
      global:
        ingress:
          enabled: true
    asserts:
      - contains:
          path: spec.ingress
          content:
            fromEndpoints:
              - matchLabels:
                  app.kubernetes.io/app: RELEASE-NAME
                  app.kubernetes.io/instance: app-RELEASE-NAME
                  k8s:io.kubernetes.pod.namespace: NAMESPACE
              - matchLabels:
                  app.kubernetes.io/name: traefik
                  k8s:io.kubernetes.pod.namespace: ingress
            toPorts:
              - ports:
                  - port: "8080"
                    protocol: TCP

  - it: should add custom ingress rules
    set:
      ciliumNetworkPolicy:
        ingress:
          - fromEndpoints:
              - matchLabels:
                  app.kubernetes.io/name: frontend
                  k8s:io.kubernetes.pod.namespace: NAMESPACE
            toPorts:
              - ports:
                  - port: "8080"
                    protocol: TCP
    asserts:
      - contains:
          path: spec.ingress
          content:
            fromEndpoints:
              - matchLabels:
                  app.kubernetes.io/name: frontend
                  k8s:io.kubernetes.pod.namespace: NAMESPACE
            toPorts:
              - ports:
                  - port: "8080"
                    protocol: TCP

  - it: should add custom egress rules
    set:
      ciliumNetworkPolicy:
        egress:
          - toFQDNs:
              - matchName: "my-remote-service.com"
            toPorts:
              - ports:
                  - port: "443"
                    protocol: TCP
    asserts:
      - contains:
          path: spec.egress
          content:
            toFQDNs:
              - matchName: "my-remote-service.com"
            toPorts:
              - ports:
                  - port: "443"
                    protocol: TCP

  - it: should add egress rules for RDS when postgres is enabled
    set:
      infra:
        postgres:
          enabled: true
    asserts:
      - contains:
          path: spec.egress
          content:
            toFQDNs:
              - matchPattern: RELEASE-NAME.*.*.rds.amazonaws.com
            toPorts:
              - ports:
                  - port: "5432"
                    protocol: TCP

  - it: should add egress rules for S3 when s3Bucket is enabled
    set:
      infra:
        s3Bucket:
          enabled: true
    asserts:
      - contains:
          path: spec.egress
          content:
            toFQDNs:
              - matchPattern: "*.s3.*.amazonaws.com"
              - matchPattern: "sts.amazonaws.com"
              - matchPattern: "*.s3.amazonaws.com"
            toPorts:
              - ports:
                  - port: "443"
                    protocol: TCP

  - it: should add egress rules for ElastiCache when redis is enabled
    set:
      infra:
        redis:
          enabled: true
    asserts:
      - contains:
          path: spec.egress
          content:
            toFQDNs:
              - matchPattern: "*.*.*.*.cache.amazonaws.com"
            toPorts:
              - ports:
                  - port: "6379"
                    protocol: TCP

  - it: should add egress rules for externalHttpsServices
    set:
      ciliumNetworkPolicy:
        externalHttpsServices:
          - api.openai.com
          - api.zoom.us
    asserts:
      - contains:
          path: spec.egress
          content:
            toFQDNs:
              - matchName: api.openai.com
              - matchName: api.zoom.us
            toPorts:
              - ports:
                  - port: "443"
                    protocol: TCP

  - it: should add egress rules for toApps
    set:
      ciliumNetworkPolicy:
        toApps:
          - name: prompt-router
          - name: license-checker
            namespace: web
    asserts:
      - contains:
          path: spec.egress
          content:
            toEndpoints:
              - matchLabels:
                  app.kubernetes.io/app: prompt-router
                  k8s:io.kubernetes.pod.namespace: NAMESPACE
              - matchLabels:
                  app.kubernetes.io/app: license-checker
                  k8s:io.kubernetes.pod.namespace: web

  - it: should add egress rules for Bedrock when bedrock is enabled
    set:
      infra:
        bedrock:
          enabled: true
    asserts:
      - contains:
          path: spec.egress
          content:
            toFQDNs:
              - matchName: bedrock.us-east-1.amazonaws.com
              - matchName: bedrock-runtime.us-east-1.amazonaws.com
              - matchName: sts.us-east-1.amazonaws.com
              - matchName: sts.amazonaws.com
            toPorts:
              - ports:
                  - port: "443"
                    protocol: TCP
