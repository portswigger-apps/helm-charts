suite: Deployment configuration
templates:
      - kubernetes/deployment.yaml
      # secret templates for checksums
      - kubernetes/secret-env.yaml
      - kubernetes/secret-volume.yaml
tests:
  - it: should create Deployment with default values
    set:
      deployment:
        enabled: true
        kind: "Deployment"
    template: kubernetes/deployment.yaml
    asserts:
      # Deployment assertions
      - isKind:
          of: Deployment
      - equal:
          path: metadata.name
          value: RELEASE-NAME
      - isNull:
          path: metadata.namespace
      - isNull:
          path: spec.replicas
      - equal:
          path: spec.strategy
          value:
            rollingUpdate:
              maxSurge: 50%
              maxUnavailable: 25%
            type: RollingUpdate

        # Pod value assertions
      - exists:
          path: spec.template.metadata.annotations.checksum/secret-env
      - exists:
          path: spec.template.metadata.annotations.checksum/secret-volume
      - exists:
          path: spec.template.metadata.labels["helm.sh/chart"]
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/app"]
          value: "RELEASE-NAME"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/instance"]
          value: "app-RELEASE-NAME"
      - equal:
          path: spec.template.metadata.labels["app.kubernetes.io/instance"]
          value: "app-RELEASE-NAME"


      # Container value assertions
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].image
          value: "public.ecr.aws/nginx/nginx:alpine"
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].securityContext
          value:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000

      # Environment assertions
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          value:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: IMAGE_TAG
              value: alpine
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts
          value:
           - mountPath: /tmp
             name: tmp-volume

  - it: should set probes correct
    set:
      deployment:
        enabled: true
        kind: "Deployment"
      healthcheckEndpoint:
        path: /my-health-check-endpoint
        port: my-port
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].startupProbe.httpGet
          value:
            path: /my-health-check-endpoint
            port: my-port
            scheme: HTTP
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].readinessProbe.httpGet
          value:
            path: /my-health-check-endpoint
            port: my-port
            scheme: HTTP
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].livenessProbe.httpGet
          value:
            path: /my-health-check-endpoint
            port: my-port
            scheme: HTTP

  - it: should set ports correct
    set:
      deployment:
        enabled: true
        kind: "Deployment"
      ports:
        app-port:
          port: 1234
          protocol: TCP
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].ports
          value:
            - name: app-port
              containerPort: 1234
              protocol: TCP

  - it: should set requests and limits correct
    set:
      deployment:
        enabled: true
        kind: "Deployment"
      resources:
        memory: 89Mi
        cpu: 452m
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.requests
          value:
            memory: 89Mi
            cpu: 452m
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.limits
          value:
            memory: 89Mi

  - it: should add environment secrets
    set:
      deployment:
        enabled: true
        kind: "Deployment"
      secretEnv:
        my-key: my-value
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].envFrom
          value:
            - secretRef:
                name: RELEASE-NAME-env

  - it: should add volume secrets
    set:
      deployment:
        enabled: true
        kind: "Deployment"
      secretVolume:
        my-key: my-value
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts[?(@.mountPath == "/secrets")]
          value:
            mountPath: /secrets
            name: RELEASE-NAME-volume
            readOnly: true
      - equal:
          path: spec.template.spec.volumes[?(@.name == "RELEASE-NAME-volume")]
          value:
            name: RELEASE-NAME-volume
            secret:
              secretName: RELEASE-NAME-volume
