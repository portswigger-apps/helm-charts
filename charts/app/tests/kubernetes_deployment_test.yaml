suite: Deployment

templates:
  - kubernetes/deployment.yaml
  - kubernetes/secret-env.yaml
  - kubernetes/secret-volume.yaml

tests:
  - it: should create Deployment with default values
    template: kubernetes/deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment

  - it: should create Deployment without replicas configured
    template: kubernetes/deployment.yaml
    asserts:
      - notExists:
          path: spec.replicas

  - it: should create Deployment with a securely configured app container by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].securityContext
          value:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000

  - it: should create Deployment with a /tmp and /java-config volumes by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts
          value:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /java-config
              name: java-config
      - equal:
          path: spec.template.spec.volumes
          value:
            - emptyDir: {}
              name: tmp-volume
            - configMap:
                name: RELEASE-NAME-java-config
              name: java-config

  - it: should create Deployment with startup, liveness and readiness probes by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].startupProbe
          value:
            httpGet:
              path: /health
              port: app-port
              scheme: HTTP
            failureThreshold: 60
            periodSeconds: 5
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].readinessProbe
          value:
            httpGet:
              path: /health
              port: app-port
              scheme: HTTP
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].livenessProbe
          value:
            httpGet:
              path: /health
              port: app-port
              scheme: HTTP
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2

  - it: should create Deployment with custom startup, liveness and readiness probes
    template: kubernetes/deployment.yaml
    set:
      healthcheckEndpoint:
        path: /-/health
        port: metrics-port
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].startupProbe
          value:
            httpGet:
              path: /-/health
              port: metrics-port
              scheme: HTTP
            failureThreshold: 60
            periodSeconds: 5
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].readinessProbe
          value:
            httpGet:
              path: /-/health
              port: metrics-port
              scheme: HTTP
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].livenessProbe
          value:
            httpGet:
              path: /-/health
              port: metrics-port
              scheme: HTTP
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2

  - it: should create Deployment with default ports configured
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].ports
          value:
            - name: app-port
              containerPort: 8080
              protocol: TCP

  - it: should create Deployment with custom ports configured
    template: kubernetes/deployment.yaml
    set:
      ports:
        metrics-port:
          port: 9090
          protocol: TCP

    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].ports
          value:
            - name: app-port
              containerPort: 8080
              protocol: TCP
            - name: metrics-port
              containerPort: 9090
              protocol: TCP

  - it: should create Deployment with requests and limits set by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.requests
          value:
            cpu: 100m
            memory: 64Mi
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.limits
          value:
            memory: 64Mi

  - it: should create Deployment with custom requests and limits set
    template: kubernetes/deployment.yaml
    set:
      resources:
        cpu: 2
        memory: 4Gi
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.requests
          value:
            cpu: "2"
            memory: 4Gi
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.limits
          value:
            memory: 4Gi

  - it: should create Deployment with secret checksums for no secrets
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-env
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-volume
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"

  - it: should create Deployment with secret checksums for environment secrets
    set:
      secretEnv:
        ENV_VAR: hello
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].envFrom
          value:
            - secretRef:
                name: RELEASE-NAME-env
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-env
          value: "b791b878161d295e24357159b7d26ce7da282343b491ffb8e5ae89a405de3bf8"
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-volume
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"

  - it: should create Deployment with secret checksums for file-based secrets
    set:
      secretVolume:
        secretfile.txt: c2VjcmV0IGZpbGUgY29udGVudHMK
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts[?(@.mountPath == "/secrets")]
          value:
            mountPath: /secrets
            name: RELEASE-NAME-volume
            readOnly: true
      - equal:
          path: spec.template.spec.volumes[?(@.name == "RELEASE-NAME-volume")]
          value:
            name: RELEASE-NAME-volume
            secret:
              secretName: RELEASE-NAME-volume
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-env
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-volume
          value: "b22c5dbc326b68af72972b3d026a37205fc3cf41f320708717d5a9ac310a13ec"

  - it: should create Deployment with a custom serviceAccountName
    template: kubernetes/deployment.yaml
    set:
      global:
        serviceAccount:
          enabled: false
          name: already-created
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: already-created

  - it: should create Deployment with the default serviceAccountName
    template: kubernetes/deployment.yaml
    set:
      global:
        serviceAccount:
          enabled: false
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: default

  - it: should create Deployment with postgres database connection details
    set:
      infra:
        postgres:
          enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_NAME"
            value: app
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_HOST"
            valueFrom:
              secretKeyRef:
                key: host
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PORT"
            valueFrom:
              secretKeyRef:
                key: port
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_USERNAME"
            valueFrom:
              secretKeyRef:
                key: username
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PASSWORD"
            valueFrom:
              secretKeyRef:
                key: password
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: DATABASE_URL
            value: postgres://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: JDBC_DATABASE_URL
            value: jdbc:postgresql://$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?user=$(DATABASE_USERNAME)&password=$(DATABASE_PASSWORD)

  - it: should create Deployment with s3Bucket connection details
    set:
      infra:
        s3Bucket:
          enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_NAME
            valueFrom:
              secretKeyRef:
                name: NAMESPACE-RELEASE-NAME-s3bucket
                key: id
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_URL
            value: s3://$(S3_BUCKET_NAME)/
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_ENDPOINT_URL
            value: https://s3.$(AWS_REGION).amazonaws.com/

  - it: should create Deployment with redis connection details
    set:
      infra:
        redis:
          enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_USERNAME
            value: "app"
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: NAMESPACE-RELEASE-NAME-redis-credentials
                key: password
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                key: endpoint_0_address
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                key: endpoint_0_port
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_URL
            value: rediss://$(REDIS_USERNAME):$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_READER_HOST
            valueFrom:
              secretKeyRef:
                key: reader_endpoint_0_address
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_READER_PORT
            valueFrom:
              secretKeyRef:
                key: reader_endpoint_0_port
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_READER_URL
            value: rediss://$(REDIS_USERNAME):$(REDIS_PASSWORD)@$(REDIS_READER_HOST):$(REDIS_READER_PORT)

  - it: should create Deployment with GOMEMLIMIT set
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: GOMEMLIMIT
            value: "63082332"

  - it: should create Deployment with GOMEMLIMIT set based on override of memory
    set:
      resources:
        memory: 4Gi
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: GOMEMLIMIT
            value: "4037269258"

  - it: should create Deployment with GOMEMLIMIT set based on override of GOMEMLIMT
    set:
      resources:
        memory: 4Gi
      env:
        GOMEMLIMIT: "12345"
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: GOMEMLIMIT
            value: "12345"

  - it: should create Deployment with _JAVA_OPTIONS set
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: _JAVA_OPTIONS
            value: "-XX:InitialRAMPercentage=50.0 -XX:MinRAMPercentage=60.0 -XX:MaxRAMPercentage=80.0 -Djava.security.properties=/java-config/java.security"

  - it: should create Deployment with _JAVA_OPTIONS set to user specified value
    template: kubernetes/deployment.yaml
    set:
      env:
        _JAVA_OPTIONS: -Xms=2048m -Xmx=2048m
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: _JAVA_OPTIONS
            value: "-Xms=2048m -Xmx=2048m"

  - it: should create Deployment with DOTNET_GCHeapHardLimit set
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: DOTNET_GCHeapHardLimit
            value: "0x3c28f5c"

  - it: should create Deployment with DOTNET_GCHeapHardLimit set
    template: kubernetes/deployment.yaml
    set:
      resources:
        memory: 512Mi
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: DOTNET_GCHeapHardLimit
            value: "0x1e147ae1"

  - it: should create Deployment with DOTNET_GCHeapHardLimit set to user specified value
    template: kubernetes/deployment.yaml
    set:
      env:
        DOTNET_GCHeapHardLimit: "0x400000"
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: DOTNET_GCHeapHardLimit
            value: "0x400000"


  - it: should create Deployment with EVENTING_BUS_NAME when configured as a producer
    set:
      infra:
        eventing:
          producer:
            enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: EVENTING_BUS_NAME
            value: portswigger

  - it: should create Deployment with s3Bucket connection details
    set:
      infra:
        eventing:
          consumer:
            enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: EVENTING_QUEUE_NAME
            value: NAMESPACE-RELEASE-NAME-events

  - it: should create Deployment with oauth-proxy url for applications without cloudfront
    set:
      global:
        ingress:
          authentication:
            enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "OAUTH_PROXY_URL"
            value: "http://platform-oauth2-proxy-psio.platform:4180/"

  - it: should not override oauth proxy url environment variable
    set:
      global:
        ingress:
          authentication:
            enabled: true
      env:
        OAUTH_PROXY_URL: "hello world"

    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "OAUTH_PROXY_URL"
            value: "http://platform-oauth2-proxy-psio.platform:4180/"
      - notContains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "OAUTH_PROXY_URL"
            value: "hello world"

  - it: should create Deployment with oauth-proxy url for applications with cloudfront
    set:
      global:
        ingress:
          authentication:
            enabled: true
      infra:
        cloudfront:
          enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "OAUTH_PROXY_URL"
            value: "http://platform-oauth2-proxy.platform:4180/"

  - it: should create Deployment with environment variable for dynamodb table
    set:
      infra:
        dynamodb:
          tables:
            - name: test
              partitionKey: pk
              attributes:
                - name: pk
                  type: string
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "TEST_TABLE_NAME"
            value: NAMESPACE-RELEASE-NAME-test

  - it: should create Deployment with environment variables for dynamodb tables
    set:
      infra:
        dynamodb:
          tables:
            - name: DynamoRevealed
              partitionKey: pk
              attributes:
                - name: pk
                  type: string
            - name: magician-impossible
              partitionKey: pk
              attributes:
                - name: pk
                  type: string
            - name: Dynamo_A_Z
              partitionKey: pk
              attributes:
                - name: pk
                  type: string
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DYNAMO_REVEALED_TABLE_NAME"
            value: NAMESPACE-RELEASE-NAME-DynamoRevealed
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "MAGICIAN_IMPOSSIBLE_TABLE_NAME"
            value: NAMESPACE-RELEASE-NAME-magician-impossible
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DYNAMO_A_Z_TABLE_NAME"
            value: NAMESPACE-RELEASE-NAME-Dynamo_A_Z

  - it: should create Deployment using prefix override in DynamoDB table environment variables
    set:
      infra:
        dynamodb:
          prefixOverride: override
          tables:
            - name: test
              partitionKey: pk
              attributes:
                - name: pk
                  type: string
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "TEST_TABLE_NAME"
            value: override-test