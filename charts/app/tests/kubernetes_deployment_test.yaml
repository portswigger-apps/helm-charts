suite: Deployment

templates:
  - kubernetes/deployment.yaml
  - kubernetes/secret-env.yaml
  - kubernetes/secret-volume.yaml

tests:
  - it: should create Deployment with default values
    template: kubernetes/deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment

  - it: should create Deployment with a securely configured app container by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].securityContext
          value:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000

  - it: should create Deployment with a /tmp volume by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts
          value:
            - mountPath: /tmp
              name: tmp-volume
      - equal:
          path: spec.template.spec.volumes
          value:
            - emptyDir: {}
              name: tmp-volume

  - it: should create Deployment with startup, liveness and readiness probes by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].startupProbe
          value:
            httpGet:
              path: /health
              port: app-port
              scheme: HTTP
            failureThreshold: 60
            periodSeconds: 5
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].readinessProbe
          value:
            httpGet:
              path: /health
              port: app-port
              scheme: HTTP
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].livenessProbe
          value:
            httpGet:
              path: /health
              port: app-port
              scheme: HTTP
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2

  - it: should create Deployment with custom startup, liveness and readiness probes
    template: kubernetes/deployment.yaml
    set:
      healthcheckEndpoint:
        path: /-/health
        port: metrics-port
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].startupProbe
          value:
            httpGet:
              path: /-/health
              port: metrics-port
              scheme: HTTP
            failureThreshold: 60
            periodSeconds: 5
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].readinessProbe
          value:
            httpGet:
              path: /-/health
              port: metrics-port
              scheme: HTTP
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].livenessProbe
          value:
            httpGet:
              path: /-/health
              port: metrics-port
              scheme: HTTP
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 10
            timeoutSeconds: 2

  - it: should create Deployment with default ports configured
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].ports
          value:
            - name: app-port
              containerPort: 8080
              protocol: TCP

  - it: should create Deployment with custom ports configured
    template: kubernetes/deployment.yaml
    set:
      ports:
        metrics-port:
          port: 9090
          protocol: TCP

    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].ports
          value:
            - name: app-port
              containerPort: 8080
              protocol: TCP
            - name: metrics-port
              containerPort: 9090
              protocol: TCP

  - it: should create Deployment with requests and limits set by default
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.requests
          value:
            cpu: 100m
            memory: 64Mi
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.limits
          value:
            memory: 64Mi

  - it: should create Deployment with custom requests and limits set
    template: kubernetes/deployment.yaml
    set:
      resources:
        cpu: 2
        memory: 4Gi
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.requests
          value:
            cpu: "2"
            memory: 4Gi
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].resources.limits
          value:
            memory: 4Gi

  - it: should create Deployment with secret checksums for no secrets
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-env
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-volume
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"

  - it: should create Deployment with secret checksums for environment secrets
    set:
      secretEnv:
        ENV_VAR: hello
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].envFrom
          value:
            - secretRef:
                name: RELEASE-NAME-env
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-env
          value: "b791b878161d295e24357159b7d26ce7da282343b491ffb8e5ae89a405de3bf8"
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-volume
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"

  - it: should create Deployment with secret checksums for file-based secrets
    set:
      secretVolume:
        secretfile.txt: c2VjcmV0IGZpbGUgY29udGVudHMK
    template: kubernetes/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].volumeMounts[?(@.mountPath == "/secrets")]
          value:
            mountPath: /secrets
            name: RELEASE-NAME-volume
            readOnly: true
      - equal:
          path: spec.template.spec.volumes[?(@.name == "RELEASE-NAME-volume")]
          value:
            name: RELEASE-NAME-volume
            secret:
              secretName: RELEASE-NAME-volume
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-env
          value: "74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b"
      - equal:
          path: spec.template.metadata.annotations.checksum/secret-volume
          value: "b22c5dbc326b68af72972b3d026a37205fc3cf41f320708717d5a9ac310a13ec"

  - it: should create Deployment with postgres database connection details
    set:
      infra:
        postgres:
          enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_NAME"
            value: app
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_HOST"
            valueFrom:
              secretKeyRef:
                key: host
                name: RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PORT"
            valueFrom:
              secretKeyRef:
                key: port
                name: RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_USERNAME"
            valueFrom:
              secretKeyRef:
                key: username
                name: RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PASSWORD"
            valueFrom:
              secretKeyRef:
                key: password
                name: RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: DATABASE_URL
            value: postgres://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: JDBC_DATABASE_URL
            value: jdbc:postgresql://$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?user=$(DATABASE_USERNAME)&password=$(DATABASE_PASSWORD)

  - it: should create Deployment with s3Bucket connection details
    set:
      infra:
        s3Bucket:
          enabled: true
    template: kubernetes/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_NAME
            valueFrom:
              secretKeyRef:
                name: RELEASE-NAME-s3bucket
                key: id
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_URL
            value: s3://$(S3_BUCKET_NAME)/
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_ENDPOINT_URL
            value: https://s3.$(AWS_REGION).amazonaws.com/
