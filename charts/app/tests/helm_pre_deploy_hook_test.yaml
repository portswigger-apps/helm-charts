suite: PreDeployHook

templates:
  - helm/pre-deploy-hook.yaml

tests:
  - it: should not create a PreDeployHook by default
    asserts:
      - hasDocuments:
          count: 0

  - it: should create a PreDeployHook with a given command
    set:
      preDeployCommand: ["python3", "manage.py", "migrate"]
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].command
          value:
            - python3
            - manage.py
            - migrate

  - it: should create a PreDeployHook with database environment variables
    set:
      preDeployCommand: ["python3"]
      infra:
        postgres:
          enabled: true
    asserts:
      - hasDocuments:
          count: 1
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_NAME"
            value: app
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_HOST"
            valueFrom:
              secretKeyRef:
                key: host
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PORT"
            valueFrom:
              secretKeyRef:
                key: port
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_USERNAME"
            valueFrom:
              secretKeyRef:
                key: username
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_PASSWORD"
            valueFrom:
              secretKeyRef:
                key: password
                name: NAMESPACE-RELEASE-NAME-postgres
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: DATABASE_URL
            value: postgres://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: JDBC_DATABASE_URL
            value: jdbc:postgresql://$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?user=$(DATABASE_USERNAME)&password=$(DATABASE_PASSWORD)

  - it: should create a PreDeployHook with database environment variables when a postgres nameOverride is set
    set:
      preDeployCommand: ["python3"]
      infra:
        postgres:
          enabled: true
          create: false
          nameOverride: database-name
    asserts:
      - hasDocuments:
          count: 1
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "DATABASE_HOST"
            valueFrom:
              secretKeyRef:
                key: host
                name: database-name-postgres

  - it: should create a PreDeployHook with s3Bucket environment variables
    set:
      infra:
        s3Bucket:
          enabled: true
      preDeployCommand: ["python3"]
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_NAME
            valueFrom:
              secretKeyRef:
                name: NAMESPACE-RELEASE-NAME-s3bucket
                key: id
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: "S3_BUCKET_URL"
            value: s3://$(S3_BUCKET_NAME)/

  - it: should create a PreDeployHook with s3Bucket environment variables if nameOverride set
    set:
      infra:
        s3Bucket:
          enabled: true
          create: false
          nameOverride: cool-bucket
      preDeployCommand: ["python3"]
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: S3_BUCKET_NAME
            valueFrom:
              secretKeyRef:
                name: cool-bucket-s3bucket
                key: id

  - it: should create Deployment with redis connection details
    set:
      infra:
        redis:
          enabled: true
      preDeployCommand: ["python3"]
    asserts:
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_USERNAME
            value: "app"
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: NAMESPACE-RELEASE-NAME-redis-credentials
                key: password
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                key: endpoint_0_address
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                key: endpoint_0_port
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_URL
            value: rediss://$(REDIS_USERNAME):$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_READER_HOST
            valueFrom:
              secretKeyRef:
                key: reader_endpoint_0_address
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_READER_PORT
            valueFrom:
              secretKeyRef:
                key: reader_endpoint_0_port
                name: NAMESPACE-RELEASE-NAME-redis-conn-tmp
      - contains:
          path: spec.template.spec.containers[?(@.name == "RELEASE-NAME")].env
          content:
            name: REDIS_READER_URL
            value: rediss://$(REDIS_USERNAME):$(REDIS_PASSWORD)@$(REDIS_READER_HOST):$(REDIS_READER_PORT)