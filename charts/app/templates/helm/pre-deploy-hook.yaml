{{- if .Values.preDeployCommand }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "app.name" . }}
  labels:
  {{- include "app.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ template "app.name" . }}-pre-deploy
      labels:
      {{- include "app.labels" . | nindent 8 }}
    spec:
        restartPolicy: Never
        containers:
        - name: {{ template "app.name" . }}
          image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          command: {{ .Values.preDeployCommand }}
          resources:
            requests:
              memory: {{ quote .Values.resources.memory }}
              cpu: {{ quote .Values.resources.cpu }}
            limits:
              memory: {{ quote .Values.resources.memory }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
            drop:
              - ALL
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: IMAGE_TAG
            value: {{ .Values.image.tag | quote }}
          {{- range $key, $value := .Values.env}}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.infra.postgres.name }}
          - name: DATABASE_NAME
            value: app
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: {{ .Values.infra.postgres.name}}-postgres
                key: host
          - name: DATABASE_PORT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.infra.postgres.name}}-postgres
                key: port
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.infra.postgres.name}}-postgres
                key: username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.infra.postgres.name}}-postgres
                key: password
          - name: DATABASE_URL
            value: "postgres://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
          - name: JDBC_DATABASE_URL
            value: "jdbc:postgresql://$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)?user=$(DATABASE_USERNAME)&password=$(DATABASE_PASSWORD)"
          {{- end }}
          {{- if or .Values.envFrom .Values.secretEnv}}
          envFrom:
          {{- with .Values.envFrom }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.secretEnv }}
          - secretRef:
            name: {{ .Release.Name }}-env
          {{- end }}
          {{- end }}
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          {{- if .Values.secretVolume }}
          - mountPath: /secrets
            name: {{ $.Release.Name }}-volume
            readOnly: true
          {{- end }}
          {{- if .Values.pod.additionalVolumeMounts }}
              {{- toYaml .Values.pod.additionalVolumeMounts | nindent 14 }}
          {{- end }}
        securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
                {{- include "app.labelselector" . | nindent 12 }}
            maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
        - labelSelector:
            matchLabels:
                {{- include "app.labelselector" . | nindent 12 }}
            maxSkew: 1
            topologyKey: topology.kubernetes.io/zone
            whenUnsatisfiable: ScheduleAnyway
        volumes:
        - name: tmp-volume
          emptyDir: {}
        {{- if .Values.secretVolume }}
        - name: {{ $.Release.Name }}-volume
          secret:
          secretName: {{ $.Release.Name }}-volume
        {{- end }}
        {{- if .Values.pod.additionalVolumes }}
            {{- toYaml .Values.pod.additionalVolumes | nindent 10 }}
        {{- end }}
{{- end }}
